name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install yamllint
        run: pip install yamllint
        
      - name: Lint YAML files
        run: yamllint .
        
      - name: Run TFLint
        uses: terraform-linters/tflint-action@v3
        with:
          working_directory: terraform
          
      - name: Run Kubeconform
        run: |
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          ./kubeconform -strict -kubernetes-version 1.24.0 k8s/

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Run OPA Tests
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.42.0/opa_linux_amd64
          chmod 755 ./opa
          ./opa test policies/ --verbose

  test:
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'
          
      - name: Run Terratest
        working-directory: terraform/test
        run: go test -v ./...
        
      - name: Setup test cluster
        uses: helm/kind-action@v1.5.0
        
      - name: Run integration tests
        run: |
          chmod +x tests/run_advanced_tests.sh
          ./tests/run_advanced_tests.sh

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up GCloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Deploy to GKE Staging
        run: |
          gcloud container clusters get-credentials staging-cluster --zone us-central1-a
          helm upgrade --install zero-day-framework ./k8s/helm/zero-day-framework -f values-staging.yaml

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://zero-day.example.com
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up GCloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Deploy to GKE Production
        run: |
          gcloud container clusters get-credentials prod-cluster --zone us-central1-a
          helm upgrade --install zero-day-framework ./k8s/helm/zero-day-framework -f values-production.yaml
